import React, { useState, useEffect } from 'react';
import axios from 'axios';
import AddThreatModal from './AddThreatModal';
import EditThreatModal from './EditThreatModal'; // Create this component

const Datatable = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false); // State to manage AddThreatModal
  const [editThreat, setEditThreat] = useState(null); // State to track edited threat

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get('http://localhost:8000/api/getTAV/');
      setData(response.data);
      setLoading(false);
    } catch (error) {
      setError(error);
      setLoading(false);
    }
  };

  const openModal = () => {
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  const openEditModal = (threat) => {
    setEditThreat(threat);
  };

  const closeEditModal = () => {
    setEditThreat(null);
  };

  const handleDeleteThreat = async (threatid) => {
    try {
      // Implement your axios.delete request to delete the threat by ID
      // After successful deletion, you can fetch the updated data
      const response = await axios.delete(`http://localhost:8000/api/deleteTAV/${threatid}/`);
      if (response.status === 200) {
        closeModal();
        fetchData();
      } else {
        console.error('Failed to update threat.');
      }
    } catch (error) {
      setError(error);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error fetching data: {error.message}</div>;
  }

  return (
    <div className="data-table p-4">
      <div className="flex justify-end mb-4">
        <button className="bg-blue-500 text-white py-2 px-4 rounded-lg shadow-lg hover:bg-blue-800" onClick={openModal}>
          + Add New Threat
        </button>
      </div>
      <table className="w-full border-collapse bg-blue-100 shadow-lg rounded-lg">
      <thead>
          <tr className="bg-steelblue text-white">
            <th className="py-3 px-6 border text-left">Threat</th>
            <th className="py-3 px-6 border text-left">Vulnerabilities</th>
            <th className="py-3 px-6 border text-left">Edit</th>
            <th className="py-3 px-6 border text-left">Delete</th>
          </tr>
        </thead>
        <tbody>
          {data.map(entry => (
            <tr key={entry._id} className="border">
              <td className="py-3 px-6 border text-left">{entry.threat}</td>
              <td className="py-3 px-6 border text-left">
                <ul>
                  {entry.vulnerabilities.map((vulnerability, index) => (
                    <li key={index} className="list-disc ml-4">{vulnerability}</li>
                  ))}
                </ul>
              </td>
              <td className="py-3 px-6 border text-left">
                <button
                  onClick={() => openEditModal(entry)}
                  className="bg-green-500 text-white py-2 px-4 rounded-lg shadow-lg hover:bg-green-800"
                >
                  Edit
                </button>
              </td>
              <td className="py-3 px-6 border text-left">
                <button
                  onClick={() => handleDeleteThreat(entry.threat)}
                  className="bg-red-500 text-white py-2 px-4 rounded-lg shadow-lg hover:bg-red-800"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {isModalOpen && <AddThreatModal closeModal={closeModal} />}
      {editThreat && (
        <EditThreatModal
          threat={editThreat}
          closeModal={closeEditModal}
          fetchData={fetchData} // Pass the fetchData function to update data after editing
        />
      )}
    </div>
  );
}

export default Datatable;
