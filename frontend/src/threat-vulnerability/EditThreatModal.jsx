import React, { useState } from 'react';
import axios from 'axios';

const EditThreatModal = ({ threat, closeModal, fetchData }) => {
  const [editedThreat, setEditedThreat] = useState({ ...threat });
  const [newVulnerability, setNewVulnerability] = useState('');

  const handleEditVulnerability = (index, updatedVulnerability) => {
    const updatedThreat = { ...editedThreat };
    updatedThreat.vulnerabilities[index] = updatedVulnerability;
    setEditedThreat(updatedThreat);
  };

  const handleDeleteVulnerability = (index) => {
    console.log(index)
    const updatedThreat = { ...editedThreat };
    updatedThreat.vulnerabilities.splice(index, 1);
    setEditedThreat(updatedThreat);
  };

  const handleAddVulnerability = () => {
    if (newVulnerability.trim() !== '') {
      const updatedThreat = { ...editedThreat };
      updatedThreat.vulnerabilities.push(newVulnerability);
      setEditedThreat(updatedThreat);
      setNewVulnerability('');
    }
  };

  const handleSave = async () => {
    console.log("In save")
    try {
      const response = await axios.put(`http://localhost:8000/api/TV/updateTAV/${editedThreat._id}/${editedThreat.threat}/`, editedThreat);

      if (response.status === 200) {
        closeModal();
        fetchData();
      } else {
        console.error('Failed to update threat.');
      }
    } catch (error) {
      console.error('An error occurred while updating threat:', error);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
      <div className="bg-white p-8 rounded-lg shadow-lg w-96">
        <h2 className="text-2xl text-steelblue font-semibold mb-4">Edit Threat</h2>
        <div>
          <label className="block text-steelblue font-semibold mb-1">Edit Threat Name:</label>
          <input
            type="text"
            value={editedThreat.threat}
            onChange={(e) => setEditedThreat({ ...editedThreat, threat: e.target.value })}
            className="w-80 px-4 py-2 border rounded mb-4"
          />
          <h3 className="font-semibold mb-2">Threat: {editedThreat.threat}</h3>
          <ul>
            {editedThreat.vulnerabilities.map((vulnerability, index) => (
              <li key={index} className="flex items-center mb-2">
                <input
                  type="text"
                  value={vulnerability}
                  onChange={(e) => handleEditVulnerability(index, e.target.value)}
                  className="w-80 px-4 py-2 border rounded mr-2"
                />
                <button
                  type="button"
                  onClick={() => handleDeleteVulnerability(index)}
                  className="bg-red-500 text-white px-4 py-2 rounded"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>
          <div className="mb-4">
            <label className="block text-steelblue font-semibold mb-1">Add Vulnerability:</label>
            <div className="flex">
              <input
                type="text"
                value={newVulnerability}
                onChange={(e) => setNewVulnerability(e.target.value)}
                className="flex-grow px-4 py-2 border rounded-l"
              />
              <button
                type="button"
                onClick={handleAddVulnerability}
                className="bg-blue-500 text-white px-4 py-2 rounded-r"
              >
                Add
              </button>
            </div>
          </div>
          <div className="mt-4">
            <button
              onClick={handleSave}
              className="bg-green-500 text-white px-4 py-2 rounded"
            >
              Save
            </button>
            <button
              onClick={closeModal}
              className="bg-red-500 text-white px-4 py-2 ml-2 rounded"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EditThreatModal;
